Create new node Project:
1. cmd: npm init => "package.json" file created
2. new folder "src" for code files
3. added new file ./src/index.js

Git initiailze:
1. created new github repository
2. cloned repository in vscode
3. first commit
4. added ".gitignore" file
5. added to "package.json" git repository

Building RESTful API by Express:
HTTP Methods: GET PUT POST DELETE
1. installed "express" package ( cmd: npm i express )
2. added express app in "index.js" file
3. installed npm package: nodemon (continues server running and updating only by saving changes)
4. declare "port" var holds the server port
5. used Enviroment Variables: process.env.PORT (for setting powershell: "$env:PORT=5000")
6. route parameters
7. Handling http get request
8. Handling http post request
9. use Postman for the various requests
10. input validation: always validate the input from the request
    used joi package for performing vallidation.
    installed joi package
    joi use: require at top of the module, build schema, validate, and perform check using if
11. Handling http put request
12. Handling http delete request
11. http status: 200 OK, 404 Not Found, 400 Bad Request


Express Advanced Topics:
1. Middleware:  request => [Middleware1] -> [Middleware2] -> ... => response
                express.json()
2. created custom middleware: logger
3. built-in middleware:  express.static('public')     
4. 3rd-party middleware
5. Enviroments: process.env
                used app.get('env') in order getting the currently enviroment
                wrap by using if the middlware used by 'development' enviroment
                change the enviroment in terminal: 'development', 'production'
6. Config: installed config package
            Created 'config' folder with json files for each enviroment
7. Debug: installed debug package
            require for debug
            change from 'console.log(...)' to 'debug(...)'
            in terminal: $env:DEBUG='app:startup'
8. Structuring express application:
        new folder: routes
        moved all the handles related to courses into 'courses.js' inside routes folder
        moved all the handles related to home into 'home.js' inside routes folder
        add require for the specified route
        add use for the route
        than change all the routes inside the specified file


DataBase:
1. inside 'template' folder created template file for manupalating db
2. installed mongoose
3. connect to mongoDB by connection string
4. create new schema inside code file
5. create model from the schema (class)
6. generate new object of this class, by entering specified values
7. use async function in order create new object/document and saving it in DB
8. refresh mongo compass and see the changes inside the collection
9. querying documents
10. file 'DB_queries.js' - templates manipulating queries
11. file 'DB_update.js' - templates updating documents


to do:
npm joi - a package for validation
check about 3rd-party middlewares: helmet, morgan 
Configuration - not really understood
asynchronous
CRUD mongoose: 18 updating, 19 deleting

done:
- git init